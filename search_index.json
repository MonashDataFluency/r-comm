[
["index.html", "Reproducible Research in R Reproducible Research in R Learning outcomes Workshop description Prerequisite Keywords Schedule Authors and copyright", " Reproducible Research in R 2019-07-25 Reproducible Research in R Level: beginner-intermediate Duration: 6 hours Student numbers: 25-30 Welcome to the Reproducible Research in R (RRR) workshop. The main aim of this workshop is to set you on the right path of making your research more reproducible and shariable. Reproducible research means that future you and anyone else will be able to pick up your analysis and reproduce the same results, including figures and tables. Reproducible research also implies well-documented research, your code should be well commented and the reasons behind functions and methods should be explained thoroughly throughout the analysis. The communication aspect should not be an afterthought, it should be recorded with your analysis as you are going through it. Rmarkdown is a way of literate programing that keeps code, words and sentences together. The ability to easily collaborate and share your analysis goes hand-in-hand with good record-keeping and reproducibility. We are going to repurpose the git version control tool and leverage the GitHub remote hosting provider for managing and sharing our work. Git + GitHub will provide a very powerful resource for global collaboration and exposure of your work. In this workshop, we are going to version control our work and push it to github, which can then be accessed by your collaborators and supervisors. Git + GitHub should become an integral part of your workflow. The RRR course given by the Monash Bioinformatics Platform for the Monash Data Fluency initiative. Our teaching style is based on the style of The Carpentries. Learning outcomes Attendees will learn how to: write vanilla markdown, Rmarkdown and bookdown documents use knitr, rmarkdown and bookdown R packages to build various document types including PDF, HTML and DOCX create reproducible Rmarkdown documents leveraging .Rproj and .RData include in-line citation and full references list in to Rmarkdown document using .bib files create presentations from Rmarkdown documents that include R code work with git version control tool create reproducible and “backed up” analysis via remote repositories (e.g github) Workshop description This workshop is an introduction to writing and communicating research using Rmarkdown. Rmarkdown is an easy way to create documents that include your R code and its output, such figure and tables. Rmarkdown is a single document that can be “knitted” and shared as various document types such as PDF and HTML. Rmarkdown supports scientific writing such as use of citations and figure cross-referencing. Rmarkdown can also be used to create presentations that include your R code and its output. We will also cover bookdown, which is an extension to Rmarkdown that allows the creation of larger documents, such as books with multiple chapters. In this workshop, we will also cover git version control tool which can help with organising and “checkpointing” Rmarkdown documents, associated R code and data. Git is not a backup system, but it does allow one to retrieve older versions of your work. Git, together with remote repositories like GitHub can provide a centralised location for your research. Together Rmarkdown, git and github can enable reproducible research that is visible and accessible to the greater public, including supervisors and management. Prerequisite This is an introductory level workshop, however some prior exposure to R and familiarity with RStudio is assumed. It is highly recommended that you read this article in full, if you have to prioritise, read at least these section (1,2,6,10). Additionally, it is highly recommended that you create an account at GitHub and remember your password. Keywords R Rmarkdown communication reproducibility git and github Schedule 10:00-10:30am (30 minutes) Welcome and warm up \\( ﾟヮﾟ)/ 10:30-12:00pm (1.5 hours) Rmarkdown Introduction (30 minutes) Vanilla markdown (30 minutes) Rmarkdown (30 minutes) 12:00-1:00pm (1 hour) lunch __ / .-/-. |'-'| | | | | .-\"\"\"\"-. \\___/ /' . '. \\ \\|/\\// (`-..:...-') |`\"\"`| ;-......-; | | '------' \\____/ 1:00-3:00pm (2 hours) More Rmarkdown Git and GitHub markdown (40 minutes) More Rmarkdown (40 minutes) YAML header (40 minutes) 3:00-3:15pm (15 minutes) Tea break ( ) ( ) ) ) ( ) ( ( ( ) ( ) ) _____________ ___ | |/ _ \\ | | | | | |_| | ___| |\\___/ / \\___________/ \\ \\_____________________/ 3:15-4:45pm (1.5 hours) Even more Rmarkdown Bibliographies (30 minutes) Bookdown (30 minutes) Miscellaneous (30 minutes) 4:45-5:00pm (15 minutes) Warm down ( * ) * ) * ( ) ( ( ( ) ( ) ) * ) ) ( ( ( ( * ) H ) ) [ ] ( ( * |-| * ) ( * ) |_| . ) ( | | . ) / \\ . ' . * ( |_____| ' . . ) | ___ | \\~~~/ ' . ( * | \\ / | \\_/ \\~~~/ ) | _Y_ | | \\_/ ( * |-----| __|__ | * `-----` __|__ Authors and copyright This course is developed for the Monash Bioinformatics Platform by: Paul Harrison Adele Barugahare Kirill Tsyganov This work is licensed under a CC BY-4: Creative Commons Attribution 4.0 International License. The attribution is “Monash Bioinformatics Platform” if copying or modifying these notes. "],
["introduction-to-rmarkdown.html", "1 Introduction to Rmarkdown 1.1 Rmarkdown core parts 1.2 Challenge: Introduction 1 1.3 Rmarkdown ecosystem 1.4 RStudio project 1.5 Setup 1.6 Challenge: Introduction 2 1.7 Useful tips", " 1 Introduction to Rmarkdown Rmarkdown has become much more then just embedding R code into a document. It enables construction of very sophisticated document types from plain text files. Rmarkdown files can become pdf documents and a static website at the same time. It can turn your analysis scattered across several different Rmarkdown documents into a single, multi-paged book with cross-referencing and citations, let’s call it a thesis, or a paper, or a course book. With essentially no effort, you can change from “rendering” your Rmarkdown into presentation slides instead of a web-page, ready for a conference in little time. Rmarkdown is a natural evolution of vanilla markdown, backed and extended by the Rmrkdown ecosystem discussed shortly. Rmarkdown isn’t the only other flavour of markdown. There are other initiatives such as GitHub Flavored Markdown (GFM) which mainly enhances content appearing on the github site, and CommonMark which tries to unify all of the different flavours of markdown syntax, “but all will converge to pandoc tool.” can this be expressed differently? 1.1 Rmarkdown core parts Rmarkdown documents are broken into three main parts: YAML header The R chunks markdown - plain text Those are different parts of the document that all work together to form or “render” a final document. Each part can be customised with further options, which will be covered later in the book. 1.1.1 YAML header The YAML header will always sits at the very top of your Rmarkdown document, and it starts and ends with triple dash symbols, ---. Note that YAML is indentation and space sensitive, meaning you need to be rather strict about the amount of indentation you use and text strings will need to be quoted. --- title: &quot;Hello world&quot; author: &quot;Kirill&quot; date: &quot;17 June 2019&quot; output: html_document --- 1.1.2 The R chunks These are special parts of the document that hold code that can be executed “inline” of the Rmarkdown document. R chunks are highly customisable via chunk options. We will spending a lot of time in the course working with code chunks and different options types. ```{r} plot(mtcars) ``` 1.1.3 Everything else is plain old markdown # Have I been Marked Down? 1.2 Challenge: Introduction 1 5 minutes 1. What file extention should we typically use for saving our Rmarkdown files? answer link 2. What document types can be produced (compiled) from Rmarkdown? 3. Will I have to learn more “languages” to use Rmarkdown (discussion question)? The short answer is no. Learning and writing Rmarkdown will take you a very long way. The longer answer is yes. At some point in the future you might want to generate very sophisticated documents and for that you’ll most certainly will need at least a tiny amount of html + css knowledge, and maybe some knowledge about LaTeX (I’ve yet to learn a single thing about LaTeX - so far so good :D). check out this bit of Rmarkdown 1.3 Rmarkdown ecosystem Rmarkdown has a relatively complicated ecosystem. It includes several different R packages. Most of those packages “wrap” other existing tools, (tools written by different people), thereby providing an “easy” way to interface with the tools via R language. A large part of the ecosystem exists thanks to pandoc tool. 1.3.1 Pandoc Pandoc is a stand-alone tool (command line tool) that one can run in the terminal to convert markdown documents to other documents types including html, pdf and MS docs. Since vanilla markdown is pretty simple in what it can produce, pandoc added whole lot of “features”, additional marking tags, that one can use to build more elaborate documents from plain text. 1.3.2 YAML This is stand along language that is used in variety of places, with main advantage to it is that it can be easily ready by humans as well easily parsed by computer. A lot of the time YAML can be used as a configuration file. This is example how it is used with Rmarkdown. We will talk about YAML in more depth in a different section. In brief we will use YAML to set documents appearance and link additional files with the documents, such as bibliographies. 1.3.3 LaTeX ¯\\_(ツ)_/¯ 1.3.4 Knitr As was mentioned before, we are using pandoc to convert markdown to other document types. knitr converts Rmarkdown files into vanilla markdown, which inturn can be converted by pandoc into an html document, for example. knitr can execute R code and assemble the results into markdown. 1.3.5 Rmarkdown An rmarkdown R package will convert .Rmd files into other file format types. Under the hood it will use pandoc to do so. The main function that we are concerned with is rmarkdown::render() which will call knitr::knit() when required. 1.3.6 Bookdown A bookdown R package enhances rmarkdown by enabling multi-page documents e.g books and easy cross-referencing. 1.3.7 Others These are more R packages that enable more things via Rmarkdown. xaringan blogdown thesisdown 1.4 RStudio project RStudio provides a nice option to create a new project. This in turn will create a new folder with a couple of special features, helping you to stay organised and “containerising” your project. The following features apply to a project directory A new R session (process) is started The .Rprofile file in the project’s main directory (if any) is sourced by R The .RData file in the project’s main directory is loaded (if project options indicate that it should be loaded). The .Rhistory file in the project’s main directory is loaded into the RStudio History pane (and used for Console Up/Down arrow command history). The current working directory is set to the project directory. Previously edited source documents are restored into editor tabs. Other RStudio settings (e.g. active tabs, splitter positions, etc.) are restored to where they were the last time the project was closed. Taken from here 1.5 Setup We will need to install these packages. Let’s install these packages packages &lt;- c(&quot;tidyverse&quot;, &quot;rmarkdown&quot;, &quot;knitr&quot;, &quot;bookdown&quot;, &quot;tinytex&quot;, &quot;citr&quot;) keep &lt;- packages[!(packages %in% installed.packages()[,&quot;Package&quot;])] if(length(keep)) { install.packages(keep) } 1.6 Challenge: Introduction 2 2 minutes 1. Now is a good time to tweak your RStudio to your needs. change font size change themes and background color rearrange panels 2. Please turn off “Restore .RData into workspace at startup” in “Tools -&gt; Global Options”. 1.7 Useful tips don’t attempt to compile to pdf_document until absolutely necessary. LaTeX engine that is used by Rmarkdown to pdf conversion known to have issues with aligning figures and tables. This typically causes figures and tables overflow to next pages and general text misalignment. Get your content written first, intermediate compilation to html_documents are totally fine, before worrying about technical issues don’t save data into .RData, this will make your work less reproducible. "],
["vanilla-markdown.html", "2 Vanilla Markdown 2.1 Vanilla tags 2.2 Practice vanilla markdown 2.3 Challenge: Markdown 1 2.4 Cross-referencing", " 2 Vanilla Markdown The original (vanilla) version of Markdown invented by John Gruber defines a handful of tags, discussed next. Markdown is a relatively small and simple language for writing plain text documents that are easy-to-write and easy-to-read, but it is greatly enhanced and extended by pandoc tool. 2.1 Vanilla tags Let’s open our first Markdown file. File └── New File └── R Markdown title = &quot;Learning Markdown&quot; author = &quot;Me&quot; select document type HTML to build (compile) the document by press knitr button or ctrl+alt+k save file by pressing ctrl^S and name the files learning_markdown.Rmd Since we are using RStudio and R, it is inevitable that we will be using Rmarkdown flavour, but we can write vanilla markdown because under the hood Rmarkdown will always be converted to vanilla markdown. From now on we are going to start using knitr to compile Rmarkdown into html. Remember from the Rmarkdown ecosystem that knitr will convert Rmarkdown to markdown and rmarkdown R package will convert - render markdown files into html. By pressing that blue button both things will happen automatically and we don’t need to think about, but I wanted you to know that. These are essentially all core (vanilla) markdown tags. Let’s practice writing them. # Header1 ## Header2 ### Header3 Paragraphs are separated by a blank line. Two spaces at the end of a line produces a line break. Text attributes _italic_, **bold**, `monospace`. Horizontal rule: --- Bullet list: * apples * oranges * pears Numbered list: 1. wash 2. rinse 3. repeat A [link](http://example.com). ![Image](Image_icon.png) &gt; Markdown uses email-style &gt; characters for blockquoting. 2.2 Practice vanilla markdown Now, it’s just a matter of learning some of the markdown syntax. Let’s delete all current text from the opened document except the YAML header and type this new text: Hello world, I'm learning R markdown ! and press the knit HTML button. Hello world, I&#39;m learning R markdown ! Not much happened. This is because we didn’t mark our text in any way. You can put as much text as you want and it will appear as is, unless “specially” marked to look different. Now add the # symbol at the start of the line and press the knit HTML button again. We’ll be pressing this button a lot! For those who like keyboard short cuts use ctrl+shift+k instead. # Hello world, I&#39;m learning R markdown ! How about now? A single hash symbol made it a whole lot bigger didn’t it? We’ve marked this whole line to be the header line. Now make three new lines with the same text, but different numbers of # symbols, one, two and three respectively and keep pressing the Knit HTML button # Hello world, I&#39;m learning R markdown ! ## Hello world, I&#39;m learning R markdown ! ### Hello world, I&#39;m learning R markdown ! This is how you can specify different headers type using markdown. Let’s now practice making very short document in markdown with a main topic section and two subsections. We will add short sentences in each section. We will start with main section header and a quote. Let’s type the following text and knit our document. # Learning Markdown &gt; I&#39;m still learning Now let’s add three bullet points summarising what we are going to learn next and then knit the document again. # Learning Markdown &gt; I&#39;m still learning Here I&#39;ll be learning: - markdown - Rmarkdown - git and github Now let’s add each one of those bullet items as a subsection to the main “Learning Markdown” section.We are going to use ## to mark subsections and don’t forget to knit again. # Learning Markdown &gt; I&#39;m still learning Here I&#39;ll be learning: - markdown - Rmarkdown - git and github ## Markdown ## Rmarkdown ## Git and GitHub Now let’s add a sentence to each section, briefly describing what they are. # Learning Markdown &gt; I&#39;m still learning Here I&#39;ll be learning: - markdown - Rmarkdown - git and github ## Markdown Here I&#39;ll learng vanilla markdown ## Rmarkdown Whereas here I&#39;ll be learning Rmarkdown ## Git and GitHub And this section is scary Let’s add a emphasis to some of the words in our document. We are going to add italic emphasis to the word “vanilla” and we are going to add bold emphasis to the capital letter “R” in the word Rmarkdown. You’ll need to knit your document still. # Learning Markdown &gt; I&#39;m still learning Here I&#39;ll be learning: - markdown - Rmarkdown - git and github ## Markdown Here I&#39;ll learng _vanilla_ markdown ## Rmarkdown Whereas here I&#39;ll be learning **R**markdown ## Git and GitHub And this section is scary 2.3 Challenge: Markdown 1 5 minutes 1. How to mark text so that it appears underlined? answer link 2. Can markdown replace html (discussion question)? It has replaced html and latex in documentation and communication of results. My feeling is that the data science ecosystem heavily revolves around markdown. But html, pdf and latex, in this context, are simply communication and sharing mediums. On would not want to replace html + css for large website projects. 2.4 Cross-referencing Let’s learn how to add external and internal links to your document, remember the syntax for adding links is [DESCRIPTION](link-address). The external link that we are going to add is going to be this https://rmarkdown.rstudio.com/. Each one of the bullet points above going to become a link to it section. The way you reference internal section is by starting your address with a # symbol then simply using all lower case letters for the section name and all spaces need to be converted to a dash symbol -. Let’s add those things in and re-build our document. # Learning Markdown &gt; I&#39;m still learning [External resource](https://rmarkdown.rstudio.com/) Here I&#39;ll be learning: - [markdown](#markdown) - [Rmarkdown](#rmarkdown) - [git and github](#git-and-github) ## Markdown Here I&#39;ll learng _vanilla_ markdown ## Rmarkdown Whereas here I&#39;ll be learning **R**markdown ## Git and GitHub And this section is scary A bonus exercise is to add logos to each sections. Search internet for: Markdown logo, and add the image using ![](link_address) syntax RMarkdown logo, and add the image using ![](link_address) syntax Git logo, and add the image using ![](link_address) syntax GitHub logo, and add the image using ![](link_address) syntax Note for the external resource that is on internet the address must start with www or https otherwise address will be interpreted as file path. "],
["rmarkdown-1.html", "3 Rmarkdown 3.1 Embedding R code 3.2 Chunk options 3.3 Challenge: Rmarkdown 1", " 3 Rmarkdown The reason that we are learning Rmarkdown is because it gives us a very straightforward way of writing plain text documents with inline R code that will become a very sophisticated document types. The bonus points also come from the fact that Rmarkdown files are easy to version control (git) and see the difference between versions. This approach of interleaving analysis code, commentary and description is very explicit, which has direct implication in reproducibility, shareability and collaboration. In the Markdown section I’ve showed you how to start new Rmarkdown document in RStudio, but lets briefly recap how we do that again. File └── New File └── R Markdown title = &quot;Learning Rmarkdown&quot; author = &quot;Me&quot; select document type HTML to build (compile) the document by press knitr button or ctrl+alt+k save file by pressing ctrl^S and name the files learning_rmarkdown.Rmd, not an additional r there. There is a hint in the name - R as to what programming language will be using for the rest of our course. Hopefully you have some familiarity with an R and it’s syntax or you have had some other exposure to other programming languages. I wont be asking you to write your own R code, most of it will be copy and paste from this book. However certain terminology will be assumed going forward. This is mainly things like “variable”, which in use in programming languages to store a value, can a string e.g “ten” or a number e.g 10. Typically to get the value out of the variable you’ll need to “print” it out. These are bear minimum understanding that you should have, and it’ll be enough to get you through this workshop. Let’s start by writing some R and embedding it into Rmarkdown documents. 3.1 Embedding R code RStudio templates .Rmd file for us. However lets delete all the text after the yaml header. The following text should remain in the file. --- title: &#39;Learning Rmarkdown&#39; author: &#39;Kirill&#39; date: &#39;25/07/2019&#39; output: html_document --- I’m going to explain knitr::opts_chunk in later section. An R chunk is a “special” block within the document that will be read and evaluated by knitr, ultimately converting everything into plain markdown. But for us it means that we can focus on our analysis and embed R code without having to worry about it. Additionally there are large number of chunk options that helps with different aspects of the document including code decoration and evaluation, results and plots rendering and display. This is how an R code chunk looks like. If you want to include code into your documents it has to be via R chunks. You can further customise the appearance of your code in the final document with chunk options. ```{r} ``` The little r there specifies the “engine”, basically telling Rmarkdown how to evaluate the code inside the chunk. Here we are saying use R engine (language) to evaluate the code. The list of languages is rather long, hence why earlier comments about Rmarkdown spanning much greater area then one might think. In this workshop we are only going to focus on R language. Let’s write our first bit of R code inside the Rmarkdown document. First we need to start a new R chunk, which we can be done in these ways: simply type it out press insert button at the top of the window ctrl+alt+i Let’s start our new document with the main header section and type the following # Learning Rmarkdown. Now let’s add simple R code to our chunk, type the following code a &lt;- \"Hello world, I'm learning Rmarkdown !\" and press knitr button to build html document. Note that as mentioned above we need to use print() statement to get the content of the variable to the scree/final document. ```{r} a &lt;- &#39;Hello world, I&#39;m learning Rmarkdown !&#39; print(a) ``` Tip: each chunk can be run independently in the console by pressing ctrl^enter or little green arrow. 3.2 Chunk options Each code chunk is highly customisable via chunk options. We are going to learn a few today, but we won’t be able to cover all of them, but here is definitive guide from the author of Rmarkdown. However you probably never going to use some of them, but as long as you know what to look for you’ll be able to search for then. Note that all chunk options have a default value. Not specifying an options means you are using the default value. These are chunk options that we are going to cover today. name value type description child NULL code_evaluation A character vector of filenames. Knitr will knit the files and place them into the main document. engine ‘R’ code_evaluation Knitr will evaluate the chunk in the named language, e.g. engine = ‘python’. Run names(knitr::knit_engines$get()) to see supported languages. eval TRUE code_evaluation If FALSE, knitr will not run the code in the code chunk. include TRUE code_evaluation If FALSE, knitr will run the chunk but not include the chunk in the final document. fig.align ‘default’ plots How to align graphics in the final document. One of ‘left’, ‘right’, or ‘center’. fig.cap NULL plots A character string to be used as a figure caption in LaTex. fig.height 7 plots The height to use in R for plots created by the chunk (in inches). fig.width 7 plots The width to use in R for plots created by the chunk (in inches). echo TRUE results If FALSE, knitr will not display the code in the code chunk above it’s results in the final document. results ‘markup’ results If ‘hide’, knitr will not display the code’s results in the final document. If ‘hold’,knitr will delay displaying all output pieces until the end of the chunk. If ‘asis’,knitr will pass through results without reformatting them (useful if results return raw HTML,etc.) message TRUE results If FALSE, knitr will not display any messages generated by the code. warning TRUE results If FALSE, knitr will not display any warning messages generated by the code. General layout of any chunk is ```{r chunk_name, options} ``` Note a couple of things, there isn’t a comma between r and chunk_name. Not sure why this is. Also note that chunk_name is optional, you can skip it, as we have in earlier examples. Naming chunks is good idea to conceptually label the chunk as to what it does, but also we you are going to build more sophisticated documents you’ll be able to selectively include chunks by refer to them by the chunk name. Lets start off with these four chunk options: echo add the content of the chunk into the document i.e the code itself eval add results of the evaluated code to the document include add code, results and figures to the document. If include = FALSE nothing related to that chunk will be added to the document. results add results to the document. If include = TRUE and results = \"hide\" no results will be added to the document, except for figures. These allow us fine level control over the final document. Think about who are generating the document for and what type of information you need to share. Sometimes we might want to show the code, but not execute it and other times we might just want to execute it and share the results, e.g plot, without actually showing the code. Let’s add a subsection to our document, type the following ## chunk options intro. In that section we are going to add a bit more code. We are going to split our a variable into three variables. We won’t discuss why you would want to do that in your programming practice, in fact this could simply come down to your personal preferences. I’m doing it here mainly to have more code in the code chunk to illustrate a couple of points about chunk options. Add this code to your chunk and press knitr ```{r} a &lt;- &#39;Hello world,&#39; b &lt;- &#39;Im learning Rmarkdown !&#39; ab &lt;- paste(a, b) print(ab) ``` 3.2.1 echo and eval Let’s now explore these to chunk options, eval and echo. Note that the default value for them is echo = TRUE and eval = TRUE. We should not see any changes to our document. ```{r echo = T, eval = T} a &lt;- &#39;Hello world,&#39; b &lt;- &#39;Im learning Rmarkdown !&#39; ab &lt;- paste(a, b) print(ab) ``` But if now switch echo off by changing TRUE to FLASE, we should see a change in our final document. Don’t forget that you need to re-build your document. ```{r echo = F} a &lt;- &#39;Hello world,&#39; b &lt;- &#39;Im learning Rmarkdown !&#39; ab &lt;- paste(a, b) print(ab) ``` Okay, we don’t see any of our original code. This is the result that we were aiming for. Let’s now turn echo back on, by adding echo = T and turning eval off by adding eval=FALSE. Once again always re-build your document with knitr. ```{r eval = F} a &lt;- &#39;Hello world,&#39; b &lt;- &#39;Im learning Rmarkdown !&#39; ab &lt;- paste(a, b) print(ab) ``` The effect that we are seeing now is the opposite, i.e we see the results but don’t see the code, which is once again what we have anticipated. 3.2.2 include We going to create another subsection in our document, let’s type ## chunk options more. In this section we are going to learn more chunk option to helps us manipulate our final document look. This option dictates whether the output of the executed code will be included into the final document. Sometimes you can simply trigger the eval flag to achieve a similar result of code not being included, but other times you might want the code to actually be executed but not included. For example when future R chunk relies on the output of this intermediate chunk, but there is no need to include that into the document. include and results are best illustrated with a plot example, so we are going to use mtcars data set that is already available in RStudio, so you don’t have to do anything to get it. You can learn more about the data set by running the following in your R console ?mtcars, but we are going to skip ahead, since knowing the data in this particular case isn’t important. Some of the syntax below can be new and unusual to you. The point of this exercise is to understand code chunk options and not to learn R code. It is totally fine for this example to copy and paste the code. Brief summary about the code kable function help with table printing in your final document and qplot helps us with plotting the data. Let’s type the following and then build our document. ```{r include = T} knitr::kable(mtcars) p1 &lt;- ggplot2::qplot(mtcars$mpg, mtcars$drat) p1 ``` We expect to see table with data and a plot. Let’s now turn include off, by switching TRUE to FLASE and re-build our document. ```{r include = F} knitr::kable(mtcars) p1 &lt;- ggplot2::qplot(mtcars$mpg, mtcars$drat) p1 ``` We don’t expect to see anything at all in our final document, remember that include controls code, results and figures output in our final document. 3.2.3 results I’m now going to introduce results options. It is similar to an echo option, and some things can be achieved with echo alone. In fact it’ll take some trial and error before fully appreciating differences between these options, echo, eval, include and results. results has four options, definitions taken from here: asis: output as-is, i.e., write raw results from R into the output document hide: hide results; this option only applies to normal R output (not warnings, messages or errors) markup: mark up the results using the output hook, e.g. put results in a special LaTeX environment hold: hold all the output pieces and push them to the end of a chunk We are only going to look at asis (default) and hide options mainly due to time constrains, but also because the use case for those options is for more advance/edge use cases. Let’s keep include = TRUE by now also add results = 'hide' ```{r include = T, results=&#39;hide&#39;} knitr::kable(mtcars) p1 &lt;- ggplot2::qplot(mtcars$mpg, mtcars$drat) p1 ``` We some things but not others. We don’t see our table but we can see the plot in our final document. This is going to be rather complicated example. The purpose of it is to illustrate the fine turning that you might want to do in your report. We are going to have three chunk options include = T, results = 'asis' (default) and eval = F. We are also going to add a second code chunk to our document, without any options and we simply going to type p1 variable in that chunk. ```{r include = T, results=&#39;asis&#39;, eval = F} knitr::kable(mtcars) p1 &lt;- ggplot2::qplot(mtcars$mpg, mtcars$drat) ``` ```{r} p1 ``` In this case we getting our table with data, and two plots, one after another. Typically you wouldn’t have those two R chunks next each other, they’ll most likely be split apart by some text explaining the data flow. Remember that eval control execution of the code. And let’s assume that I don’t want to include any of the code in the first chunk in my document. I only want to include final figure i.e p1 plot. Let’s try turning eval off, by switching it to FALSE and re-build our document ```{r include = T, results=&#39;asis&#39;, eval = F} knitr::kable(mtcars) p1 &lt;- ggplot2::qplot(mtcars$mpg, mtcars$drat) ``` ```{r} p1 ``` We get this error, because that R code hasn’t been evaluated and therefore p1 hasn’t been formed. Error in eval(expr, envir, enclos) : object &#39;p1&#39; not found Calls: &lt;Anonymous&gt; ... handle -&gt; withCallingHandlers -&gt; withVisible -&gt; eval -&gt; eval Execution halted If you look at the code closely you will see that it tells you just that object ‘p1’ not found (with additional craft around it) The way to achieved this is to set include = F and eval = T. The role of results = 'hide' is subtle here but it is a fine level control of showing the code and not showing the code. Later on I’ll also show you a way to fold your code in the final document type, using yaml header code_folding: hide option. This will hide all of your code in the final document, but will add a toggle to each code chunk to allow user to see the code if interested. The difference between results and echo is that former will completely remove results from the document, whereas the latter can have additional turning. Once again the reasons to each setting are use by use cases. Are you sharing the code and results or you just sharing results? 3.3 Challenge: Rmarkdown 1 3 minutes 1. Go through all of your code so far and give each chunk a name ``` {r chunk_name, options} ``` "],
["git-and-github-introduction.html", "4 Git and GitHub introduction 4.1 Quick summary 4.2 Github setup 4.3 RStudio setup 4.4 Git intro 4.5 Git setup 4.6 Git and GitHub workflow 4.7 Good thing about GitHub 4.8 Which files to commit?", " 4 Git and GitHub introduction When you are rock climbing you want to set your anchors often How often will depend on your experience and desire not to fall Git commit like you are vertically hanging off 70 feet rock I am going to break to you right at the start that (unfortunately) doing git and GitHub is like rock climbing, but nonetheless it has great benefits for your research and analysis including making it more visible, reproducible and potentially very collaborative. Git is one of many tools, but it is very popular. Git was designed for tracking versions of software development - a.k.a version control tool. While it hasn’t been strictly design with scientific research projects in mind we will happily re-purpose git to help us stay on top of our research projects. In the git world everything rotates around a git repository, which is a “special” folder. Inside that folder every file and folder is “tracked” for changes. Git repositories often are synonymous with project folder. In our case the RStudio project folder will be the same as the git folder. In other words we are going to tack all changes in our project. Note that the two, git and RStudio project, are independent of each other and you can use one or another or both. Below I am trying to illustrate of the differences between do-it-yourself (DIY) version control system, which may be great, and git version control. DIY version control systems are great with two caveats: no one else will understand it the future you will forget the awesome schema that you have invented Figure 4.1: This is an example of git version control vs DIY versioning via filesystem From now onwards we are going to use the git version control tool. We are also going to use GitHub for storing our files remotely. GitHub isn’t the only place that people can use with git for file storage and sharing. Below an illustration of some other common place one can choose to store they git repositories a.k.a projects. Figure 4.2: https://www.geekboots.com/story/what-is-the-difference-between-bitbucket-github-and-gitlab In theory one can also store git repositories in google drive or dropbox or other similar places, however neither of those places have been optimised for git version control repositories. We will talk shortly about advantages that GitHub brings to the project. For this workshop we are going to use GitHub, mainly because is very popular and it has a lot of useful features. 4.1 Quick summary Git and GitHub will help you: organise our directory structure create “milestones” a.k.a git commits make apparent which parts of the projects (files) are important share your work (e.g GitHub) collaborate at the global scale 4.2 Github setup There are a couple of different ways you can start a project and initiate git repository - git tracking. We are going to start with GitHub first approach. An alternative approach discussed in appendix section. I hope that everyone had already created GitHub account. We are going to make new github repository from this template. head to your web-browser (chorme or firefox) sign into github github.com head over to this repository https://github.com/MonashDataFluency/r-rep-res-git click “Use this template” You should see a screen like this. Let’s populate all of the fields with the following information. Repository name “learning_rmarkdown” Description “I’m learning Rmarkdown, yay!” click “Create repository from template” Note that a description of the repository is optional, but it is a good idea to write a brief sentence there. This is mainly to message (and remind) yourself and the public about the intentions of this project. More in depth description should also be added to the README.md file, but we are going to skip this step in our workshop. Once we have our GitHub repository we need to find a link or an address (URL) of this repository so that we can take copy of it a.k.a git clone. Cloning or coping is a routine step in any git + github workflow. In this case we are cloning our repository from the GitHub to our working computer, in our case rstudio.cloud. You can take as many copies of your repository as you like, just remember that at some point in futures you will need to merge different copies, if you like to incorporate the changes into main line. By cloning our repository we are establishing connection between rstudio.cloud and GitHub such that we can with little effort we can copy our work, that is file from rstudio.cloud to GitHub. This gives us few things: a backed up copy of our code and analysis remote access from other computers and places visibility and shareability This is how a typical URL looks for github repository looks like https://github.com/kirill/learing_rmarkdown.git There are at least three components in that url https://github.com/ the place i.e the name of the website kirill/ username learing_rmarkdown.git repository name (project name). Note that .git bit at the end can be omitted You can get this url, but either looking at the address bar of your browser or there is a little drop down menu on the right hand site. Copy that url to your clipboard, we will need it shortly. In general when we create a new github repository we automatically initialising git for version tracking. This may sound confusing, but this is mainly because we are starting with GitHub first. You can have git repository on your local computer and not have to store it anywhere else remotely. There are more details in appendix how to start with git first. Remember that GitHub is just a place where we are storing our git repository, that gives us a few extras mentioned above. 4.3 RStudio setup Now that we have setted up our github repository and found our address for cloning the repo. We need to copy our repository to rstudio.cloud. For that follow these steps: go to rstudio.cloud look for “New Project” button from drop-down menu to select “New Project from Git Repo” paste your GitHub repository url and press “ok” This will take a few seconds to initialise. After you can see Rstudio again be sure to name your project using a window at the top of the screen. 4.4 Git intro Git is a command line tool however you don’t have to learn command line just yet. There are a few git clients available - graphical user interface (GUI) tool / applications that we can use instead of learning command line. We are going to use RStudio which has good git support and therefore Rstudio will be our git client. One rather important note about git clients, most (all) clients will “simply” form a git commands as you would type it out and execute on command line. This means a couple of things: one can use mixture of clients and command line without any issues. For example if one needs more complicated git command one could run it on the command-line. if you need to do a more complicated git kung fu you might only find solution for command line and then it’ll be up to you to figure out how to work it into your client An interesting note about command line git usage noted in Happy Git with R book; One might think that git via cli is “better”, however it is more important to get the work done and have it version controlled rather then fight with the cli. Do take the simplest and quickest path to get your work version controlled. No one will care which client you are using in the end. Tips: no spaces in file names (this goes beyond git) no git repositories inside an existing git repository 4.5 Git setup If you are staring with git for very first time you need to a couple of configuration. You will need to add your name and email address to git configuration file. This is because git is all about version tracking and collaboration. It will not only track your changes and assign your name + email signature to every “milestones” (git commits), but it will be able to easily differentiate between a “milestone” from a different person, because there will be a different name + email signature. You only have to do this one per computer, so if you don’t change your computer all that often you’ll forget that you have ever done this before, but this is okay since git will happily remind you about that with this friendly message. Sadly RStudio doesn’t provide smooth way of adding name + email to your git configuration file. There are perhaps several good reasons as to why. It is likely that because this is relatively “one off” thing, RStudio has it as a low priority feature. I have confidence that it will come in later additions. For this workshop we are going to run a short script that came with our templated repository, R/init.R. Open this script in R studio to examine the content. Double click on R/init.R file in file browser panel to open it in text editor panel. There are four commands there, first two are must run, third simply a check of the config file to make sure it all worked and the 4th command is a convenience setting. At the top of the file change user_name and user_email to your name and email and run the script by pressing green button “run” at the top of that panel or using keyboard shortcut ctrl+shift+enter It felt like a lot of setting up, but this is mainly because you are not familiar with git and doing it for the first time. In general those steps are “natural” part of your workflow, very quick and not noticeable. 4.6 Git and GitHub workflow 4.6.1 First commit Let’s make our first commit, use drop down menu as indicated on the image below to select commit option You should see a new window poped up Then we are going to add three files .gitignore project.Rproj learning_markdown.Rmd Write a commit message and press commit. And this is how happy git commit looks like The commit message is rather important. Remember that commit message is: a message to a future you a message to your supervisor a message to all other external people Those commit messages are means of communications e.g “fixed figure 1 legend” “added new paragraph to chapter 1” “I bloody hate this project delete everything, starting from scratch” Good thing is, as long as you “tracking” your deletes you can always go back to them and check what you have deleted and revert some of those changes back when needed. However in this workshop we won’t be covering much of that. Also note that commit message don’t have to long, and can be as short as one work - “update2”, but at the same time well written commit message will help you and other. http://r-pkgs.had.co.nz/git.html#commit-best-practices 4.7 Good thing about GitHub PR (pull request) gitissues place to talk about issues related to a project stars acknowledgement watch interested in updates on a projects collaborators and update dates/commits as a proxy of how active the project is. also do check which files typically being changed. Also mention the fact that it is very explicit when the project was started (initiated) how much work has gone into it (commits history) and roughly time frame and intervals of work in simple workflow and collaborations git merge will work just fine. git will happily merge two different branches i.e all files in one location with all files in the other location if no two file conflict 4.8 Which files to commit? This section will be extended in the future release, but I highly recommend reading this article, specifically section 10: Which files to commit from here "],
["more-rmarkdown.html", "5 More Rmarkdown 5.1 Setup 5.2 Exploring the data 5.3 Including external files 5.4 Challenge: More Rmarkdown 1 5.5 Visualising the data 5.6 Challenge: More Rmarkdown 2 5.7 More plots 5.8 More chunk options", " 5 More Rmarkdown We are going to inrease the difficulty a little bit and we are going to start working towards our final documnet. Typically you will have some data set that you are trying to analyse and later present. There are likely to be some other prior steps before you get your tabular data. Those prior steps should also be documented. In this workshop we are going to start with a tabular data set straight away. We are going use Domestic Airlines - On Time Performance data set from data.gov.au 5.1 Setup First thing first is we need to download data. read_csv() function from readr package can “read” directly from url, but we are going to “cache” a file first and then we are going to reference our local copy. This will shorten our final html building time. We should also check licence on the data set, especially if you are going to publish some of your analysis. This data is Creative Commons Attribution 3.0 Australia licence, there is no problem in downloading and using the data. Let’s open new Rmarkdown file and delete everything from it except the yaml header. 5.1.1 Setting global chunk options As you have learned already you can manipulate each R chunk with options, but you can also set global settings for each chunk. Let’s set echo = TRUE and message = FALSE globally. This means every R chunk will be echoed i.e shown in the final document and no messages will appear anywhere in the document. options(encoding=&quot;utf-8&quot;) knitr::opts_chunk$set(echo = TRUE, message = FALSE) 5.1.2 Loading libraries We are going to do our analysis with the help of tidyverse library, let’s load it in. library(tidyverse) 5.1.3 Downloading the data We are doing conditional download, so that we don’t need re-download every time we build a document. fn_data &lt;- &quot;domestic_airline_performance.csv&quot; fn_notes &lt;- &quot;domestic_airline_performance_notes.txt&quot; if(!file.exists(fn_data)) { url_data &lt;- &quot;https://data.gov.au/data/dataset/29128ebd-dbaa-4ff5-8b86-d9f30de56452/resource/cf663ed1-0c5e-497f-aea9-e74bfda9cf44/download/otp_time_series_web.csv&quot; url_notes &lt;- &quot;https://data.gov.au/data/dataset/29128ebd-dbaa-4ff5-8b86-d9f30de56452/resource/69e214b9-b66f-4636-9c84-3efda2d0d8ae/download/otptimeserieswebnotes.txt&quot; download.file(url_data, fn_data) download.file(url_notes, fn_notes) } df &lt;- read_csv(fn_data, quote = &quot;&quot;) df 5.2 Exploring the data Let’s explore our data set. It is always helpful to get more information about the data set, good to start with getting dimensions of the data.frame, i.e number of rows and columns. Let’s include the following bit of come into our Rmarkdown document. Note that instead of executing and showing the code we are stroing results in a variable d, and for that we are using echo = FALSE chunk option. ```{r echo = F} d &lt;- df %&gt;% dim ``` Later in the text we will be able to access variable as you would in R `r d[1]` Lets add the following sentence to our Rmarkdown document and then knit to see the results. total number of observation `r d[1]` and total number of variables `r d[2]` Now we are going to find out names of all airlines presented in the data set and number of observation for each airline. In this case we are not interested in showing actual code, so we are going to hide it with echo = FALSE once again. ```{r echo = F} df %&gt;% group_by(Airline) %&gt;% summarise(n = n()) %&gt;% arrange(-n) ``` I hope you have noticed “All Airlines” name in the Airline column. I am not fairly with such airlines. This is likely some summary field that we don’t know about. In the real life you should consult people who has generated the data set, but in our case we are simply going to filter those observations out. Once again we are hiding the results from the final document, by setting eval = TRUE to make sure that the code runs since we will need df2 later in the document. ```{r echo = F, eval = T} df2 &lt;- df %&gt;% filter(Airline != &#39;All Airlines&#39;) ``` 5.3 Including external files child chunk option allows us to include external files into our document You have probably noticed that we have downloaded two files, the data set and the notes about the dat set. I didn’t want to spend time going over those notes, but let’s include them into our Rmarkdown document for future references. Let’s add the following text to out document ### Additional information about the data set ```{r child = &#39;domestic_airline_performance_notes.txt&#39;} ``` *** 5.4 Challenge: More Rmarkdown 1 5 minutes 1. Can you summarise routes in similar way as we did with airlines? use group_by(Route) 2. Can spot an odd route in you summary? If you can filter is our from df2. filter(Route != \"All Ports-All Ports\") 5.5 Visualising the data Our document looks pretty good so far, let’s add some visualisation to our document, with that will be covering these chunk options the following chunk options, all to do with figures manipulation. fig.align - left, right, center or default (left) fig.height - height specified in inches fig.width - width specified in inches fig.cap - string of text in quotes Firstly lets make sure we have our data properly filtered. We are going to filter out All Ports-All ports routes, since this is similar to All airlines field and likely to be some summary field that we are not interested in. We also going to only look at two airlines, Jetstar and Qantas, due to time constrains. Here we don’t need to set any particular chunk options because I think it would be informative to show our filtering and we actually need that code to be run. ```{r} df2 &lt;- df %&gt;% filter(Airline == &#39;Jetstar&#39; | Airline == &#39;Qantas&#39;) Route != &#39;All Ports-All Ports&#39;) ``` Here we are summarising our data so that we have an idea of how many times a particular location had be used by our airlines per year. Let’s include that bit code into our Rmarkdown document and once again let’s hide our code from the document by setting echo = FALSE ```{r echo = FALSE} df2 %&gt;% group_by(Airline, Year, Departing_Port) %&gt;% summarise(n = n()) %&gt;% ungroup %&gt;% ggplot(aes(Departing_Port, n, color = Airline)) + geom_boxplot() + theme(axis.text.x=element_text(angle=45, hjust=1)) ``` Let’s experiment with setting different dimensions to our figure. Lets set both height and width to 4. Remember that units for height and width are in inches. ```{r echo = FALSE, fig.height = 4, fig.width = 4} df2 %&gt;% group_by(Airline, Year, Departing_Port) %&gt;% summarise(n = n()) %&gt;% ungroup %&gt;% ggplot(aes(Departing_Port, n, color = Airline)) + geom_boxplot() + theme(axis.text.x=element_text(angle=45, hjust=1)) ``` Now let’s try to align our figure to the center by setting fig.align = 'center' and re-build our document. Let’s experiment with setting wight to 15 and height to 9. At some point though we are going to start hitting the physical limit of the html page. 5.6 Challenge: More Rmarkdown 2 5 minutes 1. Can you align figure to the right?? fig.align = 'right' 2. Align figure to the center and add figure legend using fit.cap chunk option fig.align = 'center', fig.cap = 'Figure 1: blah' 3. Can you add some emphasis to figure legend, e.g make important parts bold or underlined? Remember that figure legend is just a string of text and any text can be marked 5.7 More plots Let’s attempt to see what is the distribution of cancellation in any given year Note the warning message that comes up in the text, let’s assume we understand it and let’s just turn it off by setting warning = F ```{r, fig.width = 14, fig.height = 9} df2 %&gt;% filter(Airline == &#39;Jetstar&#39; | Airline == &#39;Qantas&#39;) %&gt;% select(Airline, Departing_Port, Cancellations, Year) %&gt;% ggplot(aes(Departing_Port, Cancellations, color = factor(Year))) + geom_boxplot() + facet_wrap(~Airline) + theme(axis.text.x=element_text(angle= 45, hjust=1)) ``` 5.8 More chunk options I’m going to share a couple of more code chunks, these are mainly cosmetic, some of you may never use them. prompt=FALSE i.e mimic consosle comment= remove hash symbol at the front of the output For this example I’m going to use simple for loop. We are going to use this variable sentence &lt;- c(\"Let\", \"the\", \"computer\", \"do\", \"the\", \"work\") ```{r} sentence &lt;- c(&#39;Let&#39;, &#39;the&#39;, &#39;computer&#39;, &#39;do&#39;, &#39;the&#39;, &#39;work&#39;) for(word in sentence){ print(word) } ``` sentence &lt;- c(&quot;Let&quot;, &quot;the&quot;, &quot;computer&quot;, &quot;do&quot;, &quot;the&quot;, &quot;work&quot;) for(word in sentence){ print(word) } ## [1] &quot;Let&quot; ## [1] &quot;the&quot; ## [1] &quot;computer&quot; ## [1] &quot;do&quot; ## [1] &quot;the&quot; ## [1] &quot;work&quot; Let’s add prompt=TRUE &gt; sentence &lt;- c(&quot;Let&quot;, &quot;the&quot;, &quot;computer&quot;, &quot;do&quot;, &quot;the&quot;, &quot;work&quot;) &gt; &gt; for(word in sentence){ + print(word) + } ## [1] &quot;Let&quot; ## [1] &quot;the&quot; ## [1] &quot;computer&quot; ## [1] &quot;do&quot; ## [1] &quot;the&quot; ## [1] &quot;work&quot; "],
["yaml-introduction.html", "6 YAML introduction 6.1 YAML header 6.2 Challenge: YAML 1 6.3 General yaml header 6.4 Challenge: YAML 2 6.5 Rmarkdown yaml header 6.6 Rmarkdown rendering 6.7 Challenge: YAML 3 6.8 More Rmarkdown tags 6.9 Presentation slides", " 6 YAML introduction As it was mentioned earlier in the book yaml is a stand along language, often it is used as a configuration file, which is true in the case of Rmarkdown. We are going to use it in conjunction with Rmarkdown documents by embeding yaml blob into Rmarkdown files, just like we did with R chunks. YAML blob, or in the context of Rmarkdown YAML header, must be at the very top of your Rmarkdown file. The yaml header enable high degree of customisation for our final documents. We can also use yaml header to “attach” or reference other external files such as bibliographies and styling in the form of css. For the purpose of configuring Rmarkdown documents you need to know three variable types: scalar stand along value e.g 3 or “car” list a collection of items e.g [“learing”, “to”, “use” “yaml”] map a different collection type that can hold simple types. e.g rmd_files: [“00-index.Rmd”, “01-introduction.Rmd”] 6.1 YAML header YAML is relativelly similar to another file format JSON, if you are familiar with one you should have little problem wrapping your head around the other. Fundamentally both file types trying to provide structured relationship between items via key = value pairing. Keys sometimes interchangeably used with tags. Remember that yaml language, unlike json, is very sensetive to spaces and indentations. Below are some examples of valid and invalid yaml syntax. 6.1.1 Example 1 This is a valid yaml header. In this exapmle we have a key title with scalar value Learning Rmarkdown --- title: &quot;Learning Rmarkdown&quot; --- 6.1.2 Example 2 This is also valid YAML header. Here we have rmd_files key that has as it’s value a list of items. In yaml there is two ways one can specify a list. --- rmd_files: - 00-index.Rmd - 01-introduction.Rmd --- And This is an alternative way to specify a list. --- rmd_files: [&quot;00-index.Rmd&quot;, &quot;01-introduction.Rmd&quot;} --- 6.1.3 Example 3 This on the other hand isn’t valid YAML header --- rmd_files: 00-index.Rmd 01-introduction.Rmd --- 6.2 Challenge: YAML 1 5 minutes 1. Is this a valid YAML header? ---- title: &quot;Hello world!&quot; author: Me! --- Yes, everything looks good to me 2. What about this YAML header? ---- title: &quot;Hello world!&quot; author: Me! bookdown::gitbook: config: toc: collapse: subsection --- Yes, this is highly neted, but still a completely valid yaml header 3. How do you get a list of all possible keys and values (discussion question) ? Read the docs (will need to expand this answer) 6.3 General yaml header This handful of tags are general between different document types. Most other key, values are aimed at the specific document type. In the next few sections we will look at yamls keys specific for Rmarkdown, bookdown and pdf final files configuration. --- title: &#39;Hello world&#39; author: &#39;Kirill&#39; date: &#39;13 July 2016&#39; --- 6.4 Challenge: YAML 2 5 minutes 3. Is this a valid yaml? ``` --- date: `r format(Sys.time(), &#39;%d %B, %Y&#39;)` --- ``` It is certainly valid by Rmarkdown standards, but it may not be in other systems 6.5 Rmarkdown yaml header Here we are starting to see another new key output with a value html_document --- title: &#39;Hello world&#39; author: &#39;Kirill&#39; date: &#39;13 July 2016&#39; output: html_document --- These are some of the possible values that output can take html_notebook Interactive R Notebooks html_document HTML document w/ Bootstrap CSS pdf_document PDF document (via LaTeX template) word_document Microsoft Word document (docx) odt_document OpenDocument Text document rtf_document Rich Text Format document md_document Markdown document (various flavors) Turns out that each one of those values is a also a key that can take other values. --- title: &#39;Hello world&#39; author: &#39;Kirill&#39; date: &#39;13 July 2016&#39; output: html_document: toc: true toc_depth: 3 number_sections: yes --- Note that indentation is very important here as it reflects the relationship between key value pairs. 6.6 Rmarkdown rendering As we have discussed in the introduction Rmarkdown is an abmigious word. It could mean an rmarkdown R package that converts or renders markdown into various document types. We can also be refering to an Rmarkdown document that we are writing. And we also could also use it in a more generic sence refering to the ecosystem. Here I’m going to specifically talk about Rmarkdown R package and the render function i.e rmarkdown::render(). render can take an option for output format. You can either specify the output format by directly giving it a function i.e rmarkdown::render(output_format = &quot;html_document&quot;) Or pass that same information via yaml header. As you might have noted above, html_document itself has a bunch of options. There would be a way to pass them manually in R console, but it is much nice and more reproducible to pass them via yaml header. The two way to figure out which options are available for html_document is to either google (an obvious one) or take a look at the help page for that function i.e ?rmarkdown::html_document 6.7 Challenge: YAML 3 5 minutes 1. Can you find in the help page which values df_print from html_document can take? run ?rmarkdown::html_document in Rstudio console to open help page and search for df_print 2. Set df_print to a value that will give you paginated HTML table. paged 6.8 More Rmarkdown tags Let’s add more options to our yaml file and knit it and see what has changed. --- title: &#39;Hello world&#39; author: &#39;Kirill&#39; date: &#39;13 July 2016&#39; output: html_document: df_print: paged toc: true toc_float: true toc_collapsed: true toc_depth: 3 number_sections: false code_folding: &quot;hide&quot; theme: sandstone highlight: espresso --- As I have eluted earlier if you simply change output: html_document to output: pdf_document you are going to get pdf document instead. Also remember that all of those options that we gave to html_document are specific to that document type only, although some tags might have the same name in other document types e.g toc and toc_depth keys also exist in pdf_document. We are not going to spend time on building a pdf document. It is a more finicky to build because it relying on LaTeX engine and LaTeX can be very finicky. This is more relevant for more complex documents. This is why we recommend to firstly build html document and only once you have finished you analysis and start building your pdf documents. The more interesting, in my view, document type is ioslides_presentation 6.9 Presentation slides As I’ve mentioned in previous section, output has many options, one of which is ioslides_presentation. Let’s comment html_document with all it’s options out for now, add output: ioslides_presentation and re-compile out document --- title: &#39;Hello world&#39; author: &#39;Kirill&#39; date: &#39;13 July 2016&#39; output: ioslides_presentation #output: # html_document: # df_print: paged # toc: true # toc_float: true # toc_collapsed: true # toc_depth: 3 # number_sections: false # code_folding: &quot;hide&quot; # theme: sandstone # highlight: espresso --- As you might have guessed ## symbol in the case of ioslides_presentation means the beginning of the slide. While amount of work is minimal to convert between html_document and ioslides_presentation you will obviously need to reduce amount of text. "],
["bibliographies.html", "7 Bibliographies 7.1 Challenge: Bibliographies 1 7.2 Where do you get bibtex file? 7.3 Challenge: Bibliographies 2 7.4 More about .bib and Rmarkdown 7.5 Citing R packages 7.6 Challenge: Bibliographies 3", " 7 Bibliographies We have already talked about yaml files format being a plain text and structured file format. I’ve also mentioned json in passing, as being abother plain text and structured file format. One of the main purposed for having structure is so that computer can understand (parse) the information. bibtex is yet another plain text, but structured file format, often times referred to as bibliographical database file. Bibtex originated in 1985, here is an interview with the author, Oren Patashnik, of bibtex if you interested to know how it came to be. Whereas both yaml and json originated start of 2000’s, 15 years later. The reason I am mentioning the dates is because in theory any one of those other formats, yaml or json, could have been easily re-purposed for citations. For example Citation File Format (CFF) is in fact, exactly that, yaml based, citation format. There are many different citation file formats (10-20). Rmarkdown once again leverages an external tool pandoc-citepro to generate and embed citation. pandoc-citepro can work with several different file formats including bibtex, RIS and EndNote. Hopefully this gives you a bit of an overview what is possible and available regarding citations. In this workshop we are going to use bibtex file format only. Note that very common file extension for bibtex is .bib and this is the one we are going to use. Let’s have a look at a typical .bib file content, the one shown below has two citation entries. @Manual{R-base, title = {R: A Language and Environment for Statistical Computing}, author = {{R Core Team}}, organization = {R Foundation for Statistical Computing}, address = {Vienna, Austria}, year = {2017}, url = {https://www.R-project.org/}, } @book{xie_allaire_grolemund_2019, place={Boca Raton}, title={R Markdown: the definitive guide}, publisher={CRC Press, Taylor &amp; Francis Group}, author={Xie, Yihui and Allaire, J. J. and Grolemund, Garrett}, year={2019} } There are three core parts to any citation in the .bib file: type of the citation. Type begins with an @ sign key used in our document to include citation. First item inside curly brackets field provide information about the thing that you are citing. Fields are key, value pairs One thing to note about .bib file it is case-insensitive i.e book, Book and BOOK have the same meaning and effect. 7.1 Challenge: Bibliographies 1 5 minutes 1. Can you identify types of references shown in above? There are two citation with two different types manual and book 2. Can you identify keys for the references shown above? There are two citation with two unique key each, R-base and xie_allaire_grolemund_2019 3. Can you identify at least two different fields in any of the citations? Everything that has an equals sign is a fields. 7.2 Where do you get bibtex file? There are two ways to get .bib files: manually curate one: remember that this is a plain text file format, so you can just type it out in a text editor and save as .bib file export out of your citation management or the publication website I tried a couple of website, pubmed and nature.com, neither of those appear to allow you to export .bib. Pubmed exports .nbib, which is a different file format if you look inside. Nature exports .ris, again not the one that we want. Google scholar has a button import into Bibtext that will give the correct citation. As I’ve mentioned above all of those file formats are actually supported the only problem is figuring out which “key” you can use to include your citation into the document. And there isn’t much resource out there to help you with other bibliography file formats. For now I would say the best and easiest option is to stick with .bib format. Let’s practice including citation into our Rmarkdown document. This is the paper that we are going to cite Excuse me, do you have a moment to talk about version control?. Go to this URL https://peerj.com/preprints/3159/, look for “Download” button on the right hand site, from the drop down select “BibTex”. This will download citation file. On my computer the file name was peerj-preprints-3159.bib. If you are curious to take a pick at the file content on your local computer, you can open such file with a text editor. Do not attempt to open with any other programs, such ash MS word or citation management tools. Most likely your computer will want to do just that, do not succumb! Mac people can use “TextMate” and windows people can use “Notepad” text editors. But this isn’t necessary. One you have .bib file, let’s upload it into rstudio.cloud. Navigate to your “Files” panel, there you should see “Upload” button. Use that menu to upload your .bib file onto rstudio.cloud. You should see .bib file in your file browser if you are successful. If you double click on that file it should open up in a different panel, text editor panel, and you should see the content of that file as shown below. @article{10.7287/peerj.preprints.3159v2, title = {Excuse me, do you have a moment to talk about version control?}, author = {Bryan, Jennifer}, year = 2017, month = aug, keywords = {Git, GitHub, workflow, data science, R Markdown, reproducibility, R language}, abstract = { Data analysis, statistical research, and teaching statistics have at least one thing in common: these activities all produce many files! There are data files, source code, figures, tables, prepared reports, and much more. Most of these files evolve over the course of a project and often need to be shared with others, for reading or edits, as a project unfolds. Without explicit and structured management, project organization can easily descend into chaos, taking time away from the primary work and reducing the quality of the final product. This unhappy result can be avoided by repurposing tools and workflows from the software development world, namely, distributed version control. This article describes the use of the version control system Git and and the hosting site GitHub for statistical and data scientific workflows. Special attention is given to projects that use the statistical language R and, optionally, R Markdown documents. Supplementary materials include an annotated set of links to step-by-step tutorials, real world examples, and other useful learning resources. }, volume = 5, pages = {e3159v2}, journal = {PeerJ Preprints}, issn = {2167-9843}, url = {https://doi.org/10.7287/peerj.preprints.3159v2}, doi = {10.7287/peerj.preprints.3159v2} } I hope every can identify “key” for this citation - 10.7287/peerj.preprints.3159v2. To me this is very annoying key to use since it is not very memorable and hard to type. Let’s edit this file in place and change that key to Bryan2017. Remember that key has to be unique per .bib file, but they can be any text. Make sure you save your changes (ctrl^S) and you can close this file now. Let’s include a reference to this .bib file in our Rmarkdown document via yaml header, using bibliography key. --- bibliography: &quot;peerj-preprints-3159.bib&quot; --- Now let’s use our article key to cite in the text [@Bryan2017] and re-compile our html document. 7.3 Challenge: Bibliographies 2 5 minutes 1. Go to google scholar and search for that same article Excuse me, do you have a moment to talk about version control?, find and export .bib citation and include it into our Rmarkdown document. Relatively hard task since I haven’t explained how to include multiple .bib files into yaml header. 2. If you are manually curating .bib file, how do you know which types and fields are allowed? This resource can be useful 7.4 More about .bib and Rmarkdown As was mentioned above one can append multiple references into a single .bib file or you can provide a list of .bib file --- bibliography: [&quot;peerj-preprints-3159.bib&quot;, &quot;another_reference.bib&quot;] --- OR --- bibliography: - &quot;peerj-preprints-3159.bib&quot; - &quot;another_reference.bib&quot; --- If you want to reference multiple articles in the text each key should be separated by a semicolon (;) [@Bryan2017; @bryan2018excuse] You can include any text inside square brackets [see @Bryan2017 p 12; also this ref @bryan2018excuse] If you would like to suppress author’s name you can use minus sign [-@Bryan2017; -@bryan2018excuse] You can also enable hyperlinking of the citation to the corresponding entry in the references as follows --- link-citations: true --- 7.5 Citing R packages R provides convenient citation() function that one can use to cite R packages e.g citation(&quot;ggplot2&quot;) 7.6 Challenge: Bibliographies 3 2 minutes 1. Can you get .bib citation for bookdown package? You don’t get .bib text content right away, but if you are careful at reading the message you will understand that you need to do this citation(&quot;bookdown&quot;) %&gt;% print(bibtex = TRUE) "],
["bookdown-1.html", "8 Bookdown 8.1 work in progress 8.2 Cross-references 8.3 check", " 8 Bookdown All .Rmd files located in the same directory will be compiled into the book in the (alphabetical?) order. files that start with an underscore are skipped if there is an index.Rmd it will always be treated as a first file those settings can be overwritten via _bookdown.yml _bookdown.yml must co-exist with .Rmd files in the “book” directory Bookdown has extended markdown even further for math https://bookdown.org/yihui/bookdown/markdown-extensions-by-bookdown.html#tab:theorem-envs 8.1 work in progress Besides these html_document() options, gitbook() has three other arguments: split_by argument specifies how you want to split the HTML output into multiple pages rmd: use the base filenames of the input Rmd files to create the HTML filenames, e.g., generate chapter3.html for chapter3.Rmd. none: do not split the HTML file (the book will be a single HTML file). chapter: split the file by the first-level headers. section: split the file by the second-level headers. chapter+number and section+number: similar to chapter and section, but the files will be numbered. split_bib config collapse section subsection scroll_highlight: yes before: null 8.2 Cross-references A normal paragraph. plot(cars) # a scatterplot Figure 8.1: A scatterplot of the data cars using base R graphics. 8.3 check need to address difference between html_document2 vs gitbook https://bookdown.org/yihui/rmarkdown/bookdown-output.html#bookdown-output "],
["miscellaneous.html", "9 Miscellaneous 9.1 YAML 9.2 LaTeX 9.3 Tabbed sections 9.4 Figure options via yaml 9.5 tables Rmarkdown", " 9 Miscellaneous In general think about fast turn around time and easi of editing. this will remove numbering from that header # Preface {-} 9.1 YAML WE are using yaml language define certain parameters that meant to do to different tools some are designated for pandoc other for bookdown package other general rmarkdown/knitr settings 9.2 LaTeX \\[f(k) = {n \\choose k} p^{k} (1-p)^{n-k}\\] \\[\\begin{array}{ccc} x_{11} &amp; x_{12} &amp; x_{13}\\\\ x_{21} &amp; x_{22} &amp; x_{23} \\end{array}\\] \\[X = \\begin{bmatrix}1 &amp; x_{1}\\\\ 1 &amp; x_{2}\\\\ 1 &amp; x_{3} \\end{bmatrix}\\] 9.3 Tabbed sections ## Quarterly Results {.tabset} ### By Product (tab content) ### By Region (tab content) ## Quarterly Results {.tabset .tabset-fade .tabset-pills} 9.4 Figure options via yaml This sounds interesting ok, I’ve tested out and fig_height and width via yaml do the same thing as when passed through chunk options. I guess yaml allows global defition, although one can set chunk options globally too.. also need to cover out.width = \"70%\" pretty good resource about image resizing https://sebastiansauer.github.io/figure_sizing_knitr/ 9.5 tables Rmarkdown can’t really describe at this stage where this is come from. it appears that it has links with pagedown and paged.js library paged max.print The number of rows to print. rows.print The number of rows to display. cols.print The number of columns to display. cols.min.print The minimum number of columns to display. pages.print The number of pages to display under page navigation. paged.print When set to FALSE turns off paged tables. rownames.print When set to FALSE turns off row names. "],
["references.html", "References", " References "],
["appendix.html", "A Appendix A.1 Long list of chunk options A.2 Citation A.3 Git and GitHub A.4 Difference between Markdown and HTML", " A Appendix A.1 Long list of chunk options name value type description child NULL code_evaluation A character vector of filenames. Knitr will knit the files and place them into the main document. code NULL code_evaluation Set to R code. Knitr will replace the code in the chunk with the code in the code option. engine ‘R’ code_evaluation Knitr will evaluate the chunk in the named language, e.g. engine = ‘python’. Run names(knitr::knit_engines$get()) to see supported languages. echo TRUE results If FALSE, knitr will not display the code in the code chunk above it’s results in the final document. eval TRUE code_evaluation If FALSE, knitr will not run the code in the code chunk. include TRUE code_evaluation If FALSE, knitr will run the chunk but not include the chunk in the final document. purl TRUE code_evaluation If FALSE, knitr will not include the chunk when running purl() to extract the source code. collapse FALSE results If TRUE, knitr will collapse all the source and output blocks created by the chunk into a single block. results ‘markup’ results If ‘hide’, knitr will not display the code’s results in the final document. If ‘hold’,knitr will delay displaying all output pieces until the end of the chunk. If ‘asis’,knitr will pass through results without reformatting them (useful if results return raw HTML,etc.) error TRUE results If FALSE, knitr will not display any error messages generated by the code. message TRUE results If FALSE, knitr will not display any messages generated by the code. warning TRUE results If FALSE, knitr will not display any warning messages generated by the code. comment ‘##’ code_decoration A character string. Knitr will append the string to the start of each line of results in the final document. highlight TRUE code_decoration If TRUE, knitr will highlight the source code in the final output. prompt FALSE code_decoration If TRUE, knitr will add &gt; to the start of each line of code displayed in the final document. strip.white TRUE code_decoration If TRUE, knitr will remove white spaces that appear at the beginning or end of a code chunk. tidy FALSE code_decoration If TRUE, knitr will tidy code chunks for display with the tidy_source() function in the formatR package. opts.label NULL chunks The label of options set in knitr:: opts_template() to use with the chunk. R.options NULL chunks Local R options to use with the chunk. Options are set with options() at start of chunk. Defaults are restored at end. ref.label NULL chunks A character vector of labels of the chunks from which the code of the current chunk is inherited. autodep FALSE cache If TRUE, knitr will attempt to figure out dependencies between chunks automatically by analyzing object names. cache FALSE cache If TRUE, knitr will cache the results to reuse in future knits. Knitr will reuse the results until the code chunk is altered. cache.comments NULL cache If FALSE, knitr will not rerun the chunk if only a code comment has changed. cache.lazy TRUE cache If TRUE, knitr will use lazyload() to load objects in chunk. If FALSE, knitr will use load() to load objects in chunk. cache.path ‘cache/’ cache cache.vars NULL A character vector of object names to cache if you do not wish to cache each object in the chunk. dependson NULL cache A character vector of chunk labels to s dev ‘png’ plots The R function name that will be used as a graphical device to record plots, e.g. dev=‘CairoPDF’. dev.args NULL plots Arguments to be passed to the device, e.g. dev.args=list(bg=‘yellow’, pointsize=10). dpi 72 plots A number for knitr to use as the dots per inch (dpi) in graphics (when applicable). external TRUE plots If TRUE, knitr will externalize tikz graphics to save LaTex compilation time (only for the tikzDevice::tikz() device). fig.align ‘default’ plots How to align graphics in the final document. One of ‘left’, ‘right’, or ‘center’. fig.cap NULL plots A character string to be used as a figure caption in LaTex. fig.env ‘figure’ plots The Latex environment for figures. fig.ext NULL plots The file extension for figure output, e.g. fig.ext=‘png’. fig.height 7 plots The height to use in R for plots created by the chunk (in inches). fig.width 7 plots The width to use in R for plots created by the chunk (in inches). fig.keep ‘high’ plots If ‘high’, knitr will merge low-level changes into high level plots. If ‘all’, knitr will keep all plots (low-level changes may produce new plots). If ‘first’, knitr will keep the first plot only. If ‘last’, knitr will keep the last plot only. If ‘none’, knitr will discard all plots. fig.lp ‘fig:’ plots A prefix to be used for figure labels in latex. fig.path figure/’ plots fig.pos ’’ fig.process NULL fig.retina 1 fig.scap NULL A character string to be used as a short figure caption. fig.subcap NULL plots A character string to be used as captions in sub-figures in LaTex. fig.show ‘asis’ plots If ‘hide’, knitr will generate the plots created in the chunk, but not include them in the final document. If ‘hold’, knitr will delay displaying the plots created by the chunk until the end of the chunk. If ‘animate’, knitr will combine all of the plots created by the chunk into an animation. fig.showtext NULL plots If TRUE, knitr will call showtext::showtext.begin() before drawing plots. out.extra NULL plots A character string of extra options for figures to be passed to LaTex or HTML. out.height NULL plots The height and height to scale plots to in the final output. Can be in units recognized by output, e.g. 8\\linewidth, 50px out.width NULL plots The width and height to scale plots to in the final output. Can be in units recognized by output, e.g. 8\\linewidth, 50px resize.height NULL plots The height and height to resize tike graphics in LaTex, passed to . resize.width NULL plots The width and height to resize tike graphics in LaTex, passed to . sanitize FALSE plots If TRUE, knitr will sanitize tike graphics for LaTex. A.2 Citation A.2.1 Yaml header You can also include citation into yaml header e.g references: - id: fenner2012a title: One-click science marketing author: - family: Fenner given: Martin container-title: Nature Materials volume: 11 URL: &#39;http://dx.doi.org/10.1038/nmat3283&#39; DOI: 10.1038/nmat3283 issue: 4 publisher: Nature Publishing Group page: 261-263 type: article-journal issued: year: 2012 month: 3 While this is handy for one or two citation, but this isn’t practical for a study that has more then a few citations. A.2.2 Changing citation style Apparently if you go here and download individual .csl files, specific for your citation style you then should be able to reference that file in yaml header --- csl: &quot;harvard-anglia-ruskin-university.csl&quot; --- OR --- citation-style: &quot;harvard-anglia-ruskin-university.csl&quot; --- This is explained here However I wasn’t able to change my style. I suspect there are some subtleties between bookdown and rmarkdown specifically html_docment and html_docment2 outputs Here meant to be the solution by using --- pandoc_args: [--csl=harvard-anglia-ruskin-university.csl] --- But that also didn’t work for me. Also note that biblio-style “only applied to LaTeX output. For other output formats, you need to use the csl option in YAML or –csl in pandoc_args:” --- biblio-style: apalike --- A.2.3 BibTex This is a good resource for manual bibtex curation. A.3 Git and GitHub You can turn any directories (folders) on your computers in to “special” git directory (repository) by running the following command. git init This assumes command line workflow. Other tools might have slightly different setup, but either way you need to initialise git tracking as a very first step. A brief note about README files. It is regarded as a “silent” way of communication, where you can tell all necessary information another person need to know about your project. For a software tool you would put information about how to build that particular tool and dependencies. In our case we will add information how to build final html report. We will do this a bit later in the workshop. A.4 Difference between Markdown and HTML A.4.1 This is markdown # Learning Markdown &gt; I&#39;m still learning [External resource](https://rmarkdown.rstudio.com/) Here I&#39;ll be learning: - [markdown](#markdown) - [Rmarkdown](#rmarkdown) - [git and github](#git-and-github) ## Markdown Here I&#39;ll learng _vanilla_ markdown ## Rmarkdown Whereas here I&#39;ll be learning **R**markdown ## Git and GitHub And this section is scary A.4.2 This is simplified HTML In actual fact there is more html tags required at the top of the document to turn it into fully functioning web-page &lt;div id=&quot;learning-markdown&quot; class=&quot;section level1&quot;&gt; &lt;h1&gt;Learning Markdown&lt;/h1&gt; &lt;blockquote&gt; &lt;p&gt;I’m still learning&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;&lt;a href=&quot;https://rmarkdown.rstudio.com/&quot;&gt;External resource&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Here I’ll be learning:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;#markdown&quot;&gt;markdown&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#rmarkdown&quot;&gt;Rmarkdown&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;#git-and-github&quot;&gt;git and github&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;div id=&quot;markdown&quot; class=&quot;section level2&quot;&gt; &lt;h2&gt;Markdown&lt;/h2&gt; &lt;p&gt;Here I’ll be learng &lt;em&gt;vanilla&lt;/em&gt; markdown&lt;/p&gt; &lt;/div&gt; &lt;div id=&quot;rmarkdown&quot; class=&quot;section level2&quot;&gt; &lt;h2&gt;Rmarkdown&lt;/h2&gt; &lt;p&gt;Whereas here I’ll be learning &lt;strong&gt;R&lt;/strong&gt;markdown&lt;/p&gt; &lt;/div&gt; &lt;div id=&quot;git-and-github&quot; class=&quot;section level2&quot;&gt; &lt;h2&gt;Git and GitHub&lt;/h2&gt; &lt;p&gt;And this section is scary&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; A.4.3 This is simplified LaTeX Similar to HTML, there is more crafted goes at the top of the LaTeX document in order to turn into fully functioning document. \\begin{document} \\maketitle \\hypertarget{learning-markdown}{% \\section{Learning Markdown}\\label{learning-markdown}} \\begin{quote} I&#39;m still learning \\end{quote} \\href{https://rmarkdown.rstudio.com/}{External resource} Here I&#39;ll be learning: \\begin{itemize} \\tightlist \\item \\protect\\hyperlink{markdown}{markdown} \\item \\protect\\hyperlink{rmarkdown}{Rmarkdown} \\item \\protect\\hyperlink{git-and-github}{git and github} \\end{itemize} \\hypertarget{markdown}{% \\subsection{Markdown}\\label{markdown}} Here I&#39;ll be learng \\emph{vanilla} markdown \\hypertarget{rmarkdown}{% \\subsection{Rmarkdown}\\label{rmarkdown}} Whereas here I&#39;ll be learning \\textbf{R}markdown \\hypertarget{git-and-github}{% \\subsection{Git and GitHub}\\label{git-and-github}} And this section is scary \\end{document} "]
]
